import { addPlugin, addServerHandler, addTypeTemplate, createResolver, defineNuxtModule } from '@nuxt/kit';
import { defu } from 'defu';
// Module options TypeScript interface definition
export interface ModuleOptions {
    local: boolean
    endpoint: string
}

export default defineNuxtModule<ModuleOptions>({
    meta: {
        name: 'nuxt-sse',
        configKey: 'sse',
    },
    // Default configuration options of the Nuxt module
    defaults: {
        local: true,
        endpoint: '/api/sse'
    },
    setup(options, nuxt) {
        const resolver = createResolver(import.meta.url)
        if (options.local) {
            addServerHandler({
                route: options.endpoint,
                handler: resolver.resolve('./runtime/server/sse'),
            })
        }

        const nuxtConfig = nuxt.options.runtimeConfig || {}
        const publicConfig = nuxtConfig.public || {}
        publicConfig.sseUrl = options.endpoint

        nuxt.hook('nitro:config', (nitroConfig) => {
            nitroConfig.alias = nitroConfig.alias || {}

            // Inline module runtime in Nitro bundle
            nitroConfig.externals = defu(
                typeof nitroConfig.externals === 'object' ? nitroConfig.externals : {},
                {
                    inline: [resolver.resolve('./runtime/server')]
                }
            )
            nitroConfig.alias['#sse'] = resolver.resolve('./runtime/server/utils/tools')
        })

        addTypeTemplate({
            filename: 'types/sse.d.ts',
            getContents: () =>
                [
                    '// AUTO-GENERATED BY nuxt-sse',
                    'declare module \'#sse\' {',
                    `  const { useSseEmitter }: typeof import('${resolver.resolve('./runtime/server/utils/tools')}')`,
                    '}'
                ].join('\n')
        })

        // Do not add the extension since the `.ts` will be transpiled to `.mjs` after `npm run prepack`
        addPlugin({
            name: 'nuxt-sse',
            src: resolver.resolve('./runtime/plugin'),
            mode: 'client'
        })
    }
})
